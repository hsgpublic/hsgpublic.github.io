<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on hsg의 IT 로그</title>
    <link>https://hsgpublic.github.io/categories/docker/</link>
    <description>Recent content in Docker on hsg의 IT 로그</description>
    <generator>Hugo</generator>
    <language>ko-kr</language>
    <managingEditor>hsgpublic@gmail.com (hsg)</managingEditor>
    <webMaster>hsgpublic@gmail.com (hsg)</webMaster>
    <lastBuildDate>Thu, 27 Jun 2024 08:24:07 +0900</lastBuildDate>
    <atom:link href="https://hsgpublic.github.io/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Code server on Docker</title>
      <link>https://hsgpublic.github.io/posts/10/</link>
      <pubDate>Thu, 27 Jun 2024 08:24:07 +0900</pubDate><author>hsgpublic@gmail.com (hsg)</author>
      <guid>https://hsgpublic.github.io/posts/10/</guid>
      <description>1. 서론. 에디터로 VSCode를 주로 사용합니다. 고정된 장소에서는 데스크탑이나 랩탑 환경에서 VSCode로 개발 또는 문서 작성을 하지만, 이동 중 아이패드에서는 사용할 수 없어 불편합니다. 아이패드용 VSCode 앱이 없기 때문이죠. 그렇다고 방법이 없는 것은 아닙니다. 웹 브라우저로 접속해 이용할 수 있도록 기능을 제공하니까요. https://vscode.dev 에 접속해 사용 가능하지만 터미널 등의 기능에 제약이 있어서, 개인 서버에 설치해 사용하는 몇가지 방법을 알아봅니다.&#xA;2. Code CLI. 문서: Command Line Interface (CLI) VSCode를 설치하면 CLI도 함께 설치되며, CLI만 설치하는 것도 가능합니다.</description>
    </item>
    <item>
      <title>Gitea on Docker</title>
      <link>https://hsgpublic.github.io/posts/9/</link>
      <pubDate>Mon, 10 Jun 2024 17:15:11 +0900</pubDate><author>hsgpublic@gmail.com (hsg)</author>
      <guid>https://hsgpublic.github.io/posts/9/</guid>
      <description>1. 서론. 파일의 변경 이력을 남겨야 하는 경우가 있습니다. 특히 IT 분야에서는 이슈 발생 시 이력을 확인해서 대응하는 일이 기본입니다. 누가 변경했는지도 확인되므로 해당 담당자를 통해 빠르게 처리 가능하고요. 여러 툴들이 있지만 현재 Git이 주로 사용되며, Git에 대한 설명은 Git Book에 잘 정리되어 있습니다. 리눅스를 개발한 리누스 토발즈가 소스코드 관리 툴인 BitKeeper를 이용하다가 문제가 발생해 별도로 단기간에 만들었다고 하죠(해당 인터뷰).&#xA;이후 여러 서비스들이 생겨났고, GitHub과 GitLab이 주로 사용됩니다. 초기에 GitHub은 Git의 기능과 이슈 커뮤니케이션에 초점을 둔 반면 GitLab은 CI/CD까지 포함한 프로젝트 통합 관리 서비스 성격이 강했지만, 여러 기능들이 추가되고 발전하면서 그러한 성격이 많이 희석되었습니다.</description>
    </item>
    <item>
      <title>Docker 설치</title>
      <link>https://hsgpublic.github.io/posts/8/</link>
      <pubDate>Sun, 26 May 2024 09:29:27 +0900</pubDate><author>hsgpublic@gmail.com (hsg)</author>
      <guid>https://hsgpublic.github.io/posts/8/</guid>
      <description>1. 서론. 1-1. 가상화 사용 이전. 가상화 사용 이전에는 서비스를 운영하려면 필요한 모든 패지키들을 시스템에 설치해야 했습니다. 잘 설치되면 좋은데 패키지의 버전, 패키지들 간의 의존성 문제 때문에 한번에 성공하기 힘들었죠. 간혹 환경설정 중 패키지들끼리 충돌하거나 설정이 꼬여 복구가 불가능해지면 성공할 때까지 [ 시스템 포맷 - OS 재설치 - 패키지 재설치 ]를 반복하기도 했습니다. 물론 쉘 스크립트로 자동화 시켜두면 재설치 시에 투입되는 시간과 노력을 많이 줄일 수 있습니다.&#xA;1-2. OS 가상화 사용.</description>
    </item>
  </channel>
</rss>
